AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example Serverless Booking API (FastAPI + AWS Lambda + DynamoDB + Powertools)

Globals:
  Function:
    Runtime: python3.11
    Timeout: 10
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: "booking-api"
        LOG_LEVEL: "INFO"
        TABLE_NAME: !Ref BookingTable
    Architectures:
      - x86_64

Resources:
  BookingTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-bookings"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id_index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        AllowHeaders: ["*"]

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.api_handler.lambda_handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY
      Policies:
        - AWSXRayDaemonWriteAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingTable
        - Statement:
            Effect: Allow
            Action:
              - events:PutEvents
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"

  StreamProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.stream_processor.lambda_handler
      Events:
        DDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt BookingTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            Effect: Allow
            Action:
              - events:PutEvents
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"

Outputs:
  ApiUrl:
    Description: HTTP API URL
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  TableName:
    Description: DynamoDB table name
    Value: !Ref BookingTable